// Type predicate for TypeScript
function isQueryable(object) {
    return typeof object.querySelectorAll === 'function';
}
function select(selectors, baseElement) {
    var _a;
    // Shortcut with specified-but-null baseElement
    if (arguments.length === 2 && !baseElement) {
        return;
    }
    return (_a = (baseElement !== null && baseElement !== void 0 ? baseElement : document).querySelector(String(selectors))) !== null && _a !== void 0 ? _a : undefined;
}
function selectLast(selectors, baseElement) {
    // Shortcut with specified-but-null baseElement
    if (arguments.length === 2 && !baseElement) {
        return undefined;
    }
    const all = (baseElement !== null && baseElement !== void 0 ? baseElement : document).querySelectorAll(String(selectors));
    return all[all.length - 1];
}
/**
 * @param selectors      One or more CSS selectors separated by commas
 * @param [baseElement]  The element to look inside of
 * @return               Whether it's been found
 */
function selectExists(selectors, baseElement) {
    // Shortcut with specified-but-null baseElement
    if (arguments.length === 2 && !baseElement) {
        return false;
    }
    return Boolean((baseElement !== null && baseElement !== void 0 ? baseElement : document).querySelector(String(selectors)));
}
function selectAll(selectors, baseElements) {
    // Shortcut with specified-but-null baseElements
    if (arguments.length === 2 && !baseElements) {
        return [];
    }
    // Can be: select.all('selectors') or select.all('selectors', singleElementOrDocument)
    if (!baseElements || isQueryable(baseElements)) {
        const elements = (baseElements !== null && baseElements !== void 0 ? baseElements : document).querySelectorAll(String(selectors));
        return [...elements];
    }
    const queried = new Set();
    for (const baseElement of baseElements) {
        for (const element of baseElement.querySelectorAll(String(selectors))) {
            queried.add(element);
        }
    }
    return [...queried]; // Convert to array
}
select.last = selectLast;
select.exists = selectExists;
select.all = selectAll;
export default select;
