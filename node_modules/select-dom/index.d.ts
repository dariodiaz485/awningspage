import type { ParseSelector } from 'typed-query-selector/parser';
declare type Parse<Selector extends string> = HTMLElement extends ParseSelector<Selector> ? HTMLElement : ParseSelector<Selector>;
declare type BaseElements = ParentNode | Iterable<ParentNode>;
/**
 * @param selectors      One or more CSS selectors separated by commas
 * @param [baseElement]  The element to look inside of
 * @return               The element found, if any
 */
declare function select<Selector extends string, TElement extends Element = Parse<Selector>>(selectors: Selector | Selector[], baseElement?: ParentNode): TElement | undefined;
declare namespace select {
    var last: typeof selectLast;
    var exists: typeof selectExists;
    var all: typeof selectAll;
}
declare function select<TElement extends Element = HTMLElement>(selectors: string | string[], baseElement?: ParentNode): TElement | undefined;
declare namespace select {
    var last: typeof selectLast;
    var exists: typeof selectExists;
    var all: typeof selectAll;
}
/**
 * @param selectors      One or more CSS selectors separated by commas
 * @param [baseElement]  The element to look inside of
 * @return               The element found, if any
 */
declare function selectLast<Selector extends string, TElement extends Element = Parse<Selector>>(selectors: Selector | Selector[], baseElement?: ParentNode): TElement | undefined;
declare function selectLast<TElement extends Element = HTMLElement>(selectors: string | string[], baseElement?: ParentNode): TElement | undefined;
/**
 * @param selectors      One or more CSS selectors separated by commas
 * @param [baseElement]  The element to look inside of
 * @return               Whether it's been found
 */
declare function selectExists(selectors: string | string[], baseElement?: ParentNode): boolean;
/**
 * @param selectors       One or more CSS selectors separated by commas
 * @param [baseElements]  The element or list of elements to look inside of
 * @return                An array of elements found
 */
declare function selectAll<Selector extends string, TElement extends Element = Parse<Selector>>(selectors: Selector | Selector[], baseElements?: BaseElements): TElement[];
declare function selectAll<TElement extends Element = HTMLElement>(selectors: string | string[], baseElements?: BaseElements): TElement[];
export default select;
